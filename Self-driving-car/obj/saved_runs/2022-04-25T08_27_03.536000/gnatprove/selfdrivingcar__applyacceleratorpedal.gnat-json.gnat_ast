(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__positive
  use        Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer__rep
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type string__  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type string____ref  = { mutable string____content : string__ }
  
  function   string____ref_string____content__projection (a : string____ref)
    requires {  } ensures  {  } returns string__ = a.string____content
  
  meta model_projection function string____ref_string____content__projection
  
  meta inline:no function string____ref_string____content__projection
  
  function   string____havoc (x : string____ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "gearbox" defined at selfdrivingcar.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__gearbox
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type gearbox  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 2
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = gearbox,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type gearbox__ref  = { mutable gearbox__content : gearbox }
  
  function   gearbox__ref_gearbox__content__projection (a : gearbox__ref)
    requires {  } ensures  {  } returns gearbox = a.gearbox__content
  
  meta model_projection function gearbox__ref_gearbox__content__projection
  
  meta inline:no function gearbox__ref_gearbox__content__projection
  
  function   gearbox__havoc (x : gearbox__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "gearbox" defined at selfdrivingcar.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__gearbox__rep
  
  use        Selfdrivingcar__gearbox
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__gearbox.gearbox,
    predicate in_range = Selfdrivingcar__gearbox.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "sensor" defined at selfdrivingcar.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__sensor
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type sensor  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = sensor,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type sensor__ref  = { mutable sensor__content : sensor }
  
  function   sensor__ref_sensor__content__projection (a : sensor__ref)
    requires {  } ensures  {  } returns sensor = a.sensor__content
  
  meta model_projection function sensor__ref_sensor__content__projection
  
  meta inline:no function sensor__ref_sensor__content__projection
  
  function   sensor__havoc (x : sensor__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "sensor" defined at selfdrivingcar.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__sensor__rep
  
  use        Selfdrivingcar__sensor
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__sensor.sensor,
    predicate in_range = Selfdrivingcar__sensor.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "ignition" defined at selfdrivingcar.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__ignition
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type ignition  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = ignition,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type ignition__ref  = { mutable ignition__content : ignition }
  
  function   ignition__ref_ignition__content__projection (a : ignition__ref)
    requires {  } ensures  {  } returns ignition = a.ignition__content
  
  meta model_projection function ignition__ref_ignition__content__projection
  
  meta inline:no function ignition__ref_ignition__content__projection
  
  function   ignition__havoc (x : ignition__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "ignition" defined at selfdrivingcar.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__ignition__rep
  
  use        Selfdrivingcar__ignition
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__ignition.ignition,
    predicate in_range = Selfdrivingcar__ignition.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "diagnostics" defined at selfdrivingcar.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__diagnostics
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type diagnostics  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = diagnostics,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type diagnostics__ref  = { mutable diagnostics__content : diagnostics }
  
  function   diagnostics__ref_diagnostics__content__projection
    (a : diagnostics__ref) requires {  } ensures  {  } returns
    diagnostics = a.diagnostics__content
  
  meta model_projection function diagnostics__ref_diagnostics__content__projection
  
  meta inline:no function diagnostics__ref_diagnostics__content__projection
  
  function   diagnostics__havoc (x : diagnostics__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "diagnostics" defined at selfdrivingcar.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__diagnostics__rep
  
  use        Selfdrivingcar__diagnostics
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__diagnostics.diagnostics,
    predicate in_range = Selfdrivingcar__diagnostics.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "speed" defined at selfdrivingcar.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__speed
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type speed  = <range 0 70>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 70
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = speed,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type speed__ref  = { mutable speed__content : speed }
  
  function   speed__ref_speed__content__projection (a : speed__ref) requires
    {  } ensures  {  } returns speed = a.speed__content
  
  meta model_projection function speed__ref_speed__content__projection
  
  meta inline:no function speed__ref_speed__content__projection
  
  function   speed__havoc (x : speed__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "speed" defined at selfdrivingcar.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__speed__rep
  
  use        Selfdrivingcar__speed
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Selfdrivingcar__speed.speed) requires { True }
    ensures  { True } returns int = (Selfdrivingcar__speed.speed'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__speed.speed,
    predicate in_range = Selfdrivingcar__speed.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "batterypercentage" defined at selfdrivingcar.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__batterypercentage
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type batterypercentage  = <range 0 100>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 100
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = batterypercentage,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type batterypercentage__ref  = { mutable batterypercentage__content : batterypercentage }
  
  function   batterypercentage__ref_batterypercentage__content__projection
    (a : batterypercentage__ref) requires {  } ensures  {  } returns
    batterypercentage = a.batterypercentage__content
  
  meta model_projection function batterypercentage__ref_batterypercentage__content__projection
  
  meta inline:no function batterypercentage__ref_batterypercentage__content__projection
  
  function   batterypercentage__havoc (x : batterypercentage__ref) requires
    {  } ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "batterypercentage" defined at selfdrivingcar.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__batterypercentage__rep
  
  use        Selfdrivingcar__batterypercentage
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Selfdrivingcar__batterypercentage.batterypercentage)
    requires { True } ensures  { True } returns
    int = (Selfdrivingcar__batterypercentage.batterypercentage'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__batterypercentage.batterypercentage,
    predicate in_range = Selfdrivingcar__batterypercentage.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "car" defined at selfdrivingcar.ads:15, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Selfdrivingcar__car__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Selfdrivingcar__gearbox
  use        Selfdrivingcar__gearbox__rep
  use        Selfdrivingcar__sensor
  use        Selfdrivingcar__sensor__rep
  use        Selfdrivingcar__ignition
  use        Selfdrivingcar__ignition__rep
  use        Selfdrivingcar__diagnostics
  use        Selfdrivingcar__diagnostics__rep
  use        Selfdrivingcar__speed
  use        Selfdrivingcar__speed__rep
  use        Selfdrivingcar__batterypercentage
  use        Selfdrivingcar__batterypercentage__rep
  
  type __split_fields  = { [name:gearEngaged]
                           [model_trace:.941]rec__selfdrivingcar__car__gearengaged : Selfdrivingcar__gearbox.gearbox;
                           [name:objectScanner]
                           [model_trace:.946]rec__selfdrivingcar__car__objectscanner : Selfdrivingcar__sensor.sensor;
                           [model_trace:.950]
                           [name:status]rec__selfdrivingcar__car__status : Selfdrivingcar__ignition.ignition;
                           [model_trace:.954]
                           [name:diagnosticMode]rec__selfdrivingcar__car__diagnosticmode : Selfdrivingcar__diagnostics.diagnostics;
                           [model_trace:.958]
                           [name:currentSpeed]rec__selfdrivingcar__car__currentspeed : Selfdrivingcar__speed.speed;
                           [model_trace:.962]
                           [name:batteryCharge]rec__selfdrivingcar__car__batterycharge : Selfdrivingcar__batterypercentage.batterypercentage }
  
  function [name:gearEngaged] [model_trace:.941] 
    __split_fields_rec__selfdrivingcar__car__gearengaged__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__gearbox.gearbox = a.rec__selfdrivingcar__car__gearengaged
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__gearengaged__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__gearengaged__projection
  
  function [name:objectScanner] [model_trace:.946] 
    __split_fields_rec__selfdrivingcar__car__objectscanner__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__sensor.sensor = a.rec__selfdrivingcar__car__objectscanner
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__objectscanner__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__objectscanner__projection
  
  function [model_trace:.950] [name:status] 
    __split_fields_rec__selfdrivingcar__car__status__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__ignition.ignition = a.rec__selfdrivingcar__car__status
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__status__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__status__projection
  
  function [model_trace:.954] [name:diagnosticMode] 
    __split_fields_rec__selfdrivingcar__car__diagnosticmode__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__diagnostics.diagnostics = a.rec__selfdrivingcar__car__diagnosticmode
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__diagnosticmode__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__diagnosticmode__projection
  
  function [model_trace:.958] [name:currentSpeed] 
    __split_fields_rec__selfdrivingcar__car__currentspeed__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__speed.speed = a.rec__selfdrivingcar__car__currentspeed
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__currentspeed__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__currentspeed__projection
  
  function [model_trace:.962] [name:batteryCharge] 
    __split_fields_rec__selfdrivingcar__car__batterycharge__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__batterypercentage.batterypercentage = a.rec__selfdrivingcar__car__batterycharge
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__batterycharge__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__batterycharge__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   selfdrivingcar__car__gearengaged__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__gearengaged_ (a : __rep) requires
    { (selfdrivingcar__car__gearengaged__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__gearengaged) }
    returns Selfdrivingcar__gearbox.gearbox
  
  function   selfdrivingcar__car__objectscanner__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__objectscanner_ (a : __rep) requires
    { (selfdrivingcar__car__objectscanner__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__objectscanner) }
    returns Selfdrivingcar__sensor.sensor
  
  function   selfdrivingcar__car__status__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__status_ (a : __rep) requires
    { (selfdrivingcar__car__status__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__status) } returns
    Selfdrivingcar__ignition.ignition
  
  function   selfdrivingcar__car__diagnosticmode__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__diagnosticmode_ (a : __rep) requires
    { (selfdrivingcar__car__diagnosticmode__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__diagnosticmode) }
    returns Selfdrivingcar__diagnostics.diagnostics
  
  function   selfdrivingcar__car__currentspeed__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__currentspeed_ (a : __rep) requires
    { (selfdrivingcar__car__currentspeed__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__currentspeed) }
    returns Selfdrivingcar__speed.speed
  
  function   selfdrivingcar__car__batterycharge__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__batterycharge_ (a : __rep) requires
    { (selfdrivingcar__car__batterycharge__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__batterycharge) }
    returns Selfdrivingcar__batterypercentage.batterypercentage
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Selfdrivingcar__gearbox__rep.to_rep
                a.__split_fields.rec__selfdrivingcar__car__gearengaged)
               = (Selfdrivingcar__gearbox__rep.to_rep
                    b.__split_fields.rec__selfdrivingcar__car__gearengaged))
              /\
              ((Selfdrivingcar__sensor__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__objectscanner)
                 = (Selfdrivingcar__sensor__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__objectscanner))
              /\
              ((Selfdrivingcar__ignition__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__status)
                 = (Selfdrivingcar__ignition__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__status)) /\
              ((Selfdrivingcar__diagnostics__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__diagnosticmode)
                 = (Selfdrivingcar__diagnostics__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__diagnosticmode))
              /\
              ((Selfdrivingcar__speed__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__currentspeed)
                 = (Selfdrivingcar__speed__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__currentspeed))
              /\
              ((Selfdrivingcar__batterypercentage__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__batterycharge)
                 = (Selfdrivingcar__batterypercentage__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__batterycharge)))
           then True  else False)

end

(* Module for axiomatizing type "car" defined at selfdrivingcar.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__car
  
  use export Selfdrivingcar__car__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type car  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   selfdrivingcar__car__gearengaged__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__gearengaged__last__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__gearengaged__position () requires {  }
    ensures  {  } returns int
  
  axiom selfdrivingcar__car__gearengaged__first__bit_axiom : ((selfdrivingcar__car__gearengaged__first__bit
                                                                 ) >= 0)
  
  axiom selfdrivingcar__car__gearengaged__last__bit_axiom : ((selfdrivingcar__car__gearengaged__last__bit
                                                                )
                                                               > (selfdrivingcar__car__gearengaged__first__bit
                                                                    ))
  
  axiom selfdrivingcar__car__gearengaged__position_axiom : ((selfdrivingcar__car__gearengaged__position
                                                               ) >= 0)
  
  function   selfdrivingcar__car__objectscanner__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__objectscanner__last__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__objectscanner__position () requires {  }
    ensures  {  } returns int
  
  axiom selfdrivingcar__car__objectscanner__first__bit_axiom : ((selfdrivingcar__car__objectscanner__first__bit
                                                                   ) >= 0)
  
  axiom selfdrivingcar__car__objectscanner__last__bit_axiom : ((selfdrivingcar__car__objectscanner__last__bit
                                                                  )
                                                                 > (selfdrivingcar__car__objectscanner__first__bit
                                                                    ))
  
  axiom selfdrivingcar__car__objectscanner__position_axiom : ((selfdrivingcar__car__objectscanner__position
                                                                 ) >= 0)
  
  function   selfdrivingcar__car__status__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__status__last__bit () requires {  } ensures 
    {  } returns int
  
  function   selfdrivingcar__car__status__position () requires {  } ensures 
    {  } returns int
  
  axiom selfdrivingcar__car__status__first__bit_axiom : ((selfdrivingcar__car__status__first__bit
                                                            ) >= 0)
  
  axiom selfdrivingcar__car__status__last__bit_axiom : ((selfdrivingcar__car__status__last__bit
                                                           )
                                                          > (selfdrivingcar__car__status__first__bit
                                                               ))
  
  axiom selfdrivingcar__car__status__position_axiom : ((selfdrivingcar__car__status__position
                                                          ) >= 0)
  
  function   selfdrivingcar__car__diagnosticmode__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__diagnosticmode__last__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__diagnosticmode__position () requires {  }
    ensures  {  } returns int
  
  axiom selfdrivingcar__car__diagnosticmode__first__bit_axiom : ((selfdrivingcar__car__diagnosticmode__first__bit
                                                                    ) >= 0)
  
  axiom selfdrivingcar__car__diagnosticmode__last__bit_axiom : ((selfdrivingcar__car__diagnosticmode__last__bit
                                                                   )
                                                                  > (
                                                                  selfdrivingcar__car__diagnosticmode__first__bit
                                                                    ))
  
  axiom selfdrivingcar__car__diagnosticmode__position_axiom : ((selfdrivingcar__car__diagnosticmode__position
                                                                  ) >= 0)
  
  function   selfdrivingcar__car__currentspeed__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__currentspeed__last__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__currentspeed__position () requires {  }
    ensures  {  } returns int
  
  axiom selfdrivingcar__car__currentspeed__first__bit_axiom : ((selfdrivingcar__car__currentspeed__first__bit
                                                                  ) >= 0)
  
  axiom selfdrivingcar__car__currentspeed__last__bit_axiom : ((selfdrivingcar__car__currentspeed__last__bit
                                                                 )
                                                                > (selfdrivingcar__car__currentspeed__first__bit
                                                                    ))
  
  axiom selfdrivingcar__car__currentspeed__position_axiom : ((selfdrivingcar__car__currentspeed__position
                                                                ) >= 0)
  
  function   selfdrivingcar__car__batterycharge__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__batterycharge__last__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__batterycharge__position () requires {  }
    ensures  {  } returns int
  
  axiom selfdrivingcar__car__batterycharge__first__bit_axiom : ((selfdrivingcar__car__batterycharge__first__bit
                                                                   ) >= 0)
  
  axiom selfdrivingcar__car__batterycharge__last__bit_axiom : ((selfdrivingcar__car__batterycharge__last__bit
                                                                  )
                                                                 > (selfdrivingcar__car__batterycharge__first__bit
                                                                    ))
  
  axiom selfdrivingcar__car__batterycharge__position_axiom : ((selfdrivingcar__car__batterycharge__position
                                                                 ) >= 0)
  
  function   user_eq (a : car b : car) requires { True } ensures  { True }
    returns bool
  
  function   dummy () requires {  } ensures  {  } returns car
  
  type car__ref  = { mutable car__content : car }
  
  function   car__ref_car__content__projection (a : car__ref) requires {  }
    ensures  {  } returns car = a.car__content
  
  meta model_projection function car__ref_car__content__projection
  
  meta inline:no function car__ref_car__content__projection
  
  function   car__havoc (x : car__ref) requires {  } ensures  {  } returns
    unit

end

(* Module for defining a ref holding the value of variable "mycar" defined at selfdrivingcar.ads:27, created in Gnat2Why.Decls.Translate_Variable *)
module Selfdrivingcar__mycar
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Selfdrivingcar__car
  
  val mycar__split_fields [name:myCar] [model_projected]
  [model_trace:968] [sloc:selfdrivingcar.ads:27]: Selfdrivingcar__car.__split_fields

end

(* Module giving axioms for type "car" defined at selfdrivingcar.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__car___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Selfdrivingcar__car
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_217) : Selfdrivingcar__car.car
    ([mlw:proxy_symbol] [introduced] temp___is_init_213) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_214) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_215) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_216) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_218) : Selfdrivingcar__car.car
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_219) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for possibly declaring a logic function for "invariant" defined at selfdrivingcar.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Selfdrivingcar__invariant
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Selfdrivingcar__car
  
  function   invariant__
    (Selfdrivingcar__mycar___mycar__split_fields___ : Selfdrivingcar__car.__split_fields)
    requires { True } ensures  { True } returns bool
  
  function   invariant____function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_163) : bool
    Selfdrivingcar__mycar___mycar__split_fields___ : Selfdrivingcar__car.__split_fields)
    requires { True } ensures  { True } returns bool

end

(* Module giving a program function and a defining axiom for the expression function "invariant" defined at selfdrivingcar.ads:34, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Selfdrivingcar__invariant___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__mycar
  use        Selfdrivingcar__car
  use        Selfdrivingcar__car___axiom
  use        Selfdrivingcar__invariant
  use        Selfdrivingcar__diagnostics
  use        Selfdrivingcar__diagnostics__rep
  
  function   invariant__ (__void_param : unit) requires { True } ensures 
    { ((result
          = (Selfdrivingcar__invariant.invariant__
               !Selfdrivingcar__mycar.mycar__split_fields)) /\
         (Selfdrivingcar__invariant.invariant____function_guard result
            !Selfdrivingcar__mycar.mycar__split_fields) /\
         (result
            = ((Selfdrivingcar__diagnostics__rep.to_rep
                  ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__diagnosticmode)
                 <> 0))) } returns bool
  
  axiom invariant____post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom invariant____def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining the constant "speedlimit" defined at selfdrivingcar.ads:55, created in Gnat2Why.Decls.Translate_Constant *)
module Selfdrivingcar__applyacceleratorpedal__speedlimit
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:1030] [name:speedLimit] [sloc:selfdrivingcar.ads:55]
    speedlimit () requires {  } ensures  {  } returns int

end

(* Module for possibly declaring a logic function for "line_length" defined at a-textio.ads:243, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__line_length__2
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  
  function   line_length
    (Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns int
  
  function   line_length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_161) : int
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns bool

end

(* Module for possibly declaring a logic function for "page_length" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__page_length__2
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  
  function   page_length
    (Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns int
  
  function   page_length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_162) : int
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns bool

end

(* Module declaring the external object "ada___ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__file_system
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val file_system  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_in
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_in  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_out
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_out  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_err
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_err  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_in
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_in  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_out
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_out  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_err
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_err  : _gnatprove_standard.Main.__private

end

(* Module for declaring a program function (and possibly an axiom) for "put_line" defined at a-textio.ads:506, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__put_line__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Standard__string
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   put_line (item : Standard__string.string__) requires { True }
    ensures 
    { (([GP_Pretty_Ada:3396] (--pp_tagged NOT IMPLEMENTED
                                = (Ada___ada__text_io__line_length__2.line_length
                                     !Ada___ada__text_io__file_system.file_system
                                     !Ada___ada__text_io__standard_in.standard_in
                                     !Ada___ada__text_io__standard_out.standard_out
                                     !Ada___ada__text_io__standard_err.standard_err
                                     !Ada___ada__text_io__current_in.current_in
                                     !Ada___ada__text_io__current_out.current_out
                                     !Ada___ada__text_io__current_err.current_err)))
         /\
         ([GP_Pretty_Ada:3402] (--pp_tagged NOT IMPLEMENTED
                                  = (Ada___ada__text_io__page_length__2.page_length
                                       !Ada___ada__text_io__file_system.file_system
                                       !Ada___ada__text_io__standard_in.standard_in
                                       !Ada___ada__text_io__standard_out.standard_out
                                       !Ada___ada__text_io__standard_err.standard_err
                                       !Ada___ada__text_io__current_in.current_in
                                       !Ada___ada__text_io__current_out.current_out
                                       !Ada___ada__text_io__current_err.current_err)))) }
    returns unit

end

(* Module giving axioms for type "speed" defined at selfdrivingcar.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__speed___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__speed
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_203) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_199) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_200) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_201) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_202) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_199) = True) \/
          (Selfdrivingcar__speed.first <= Selfdrivingcar__speed.last))
       then
       (Selfdrivingcar__speed.dynamic_property Selfdrivingcar__speed.first
          Selfdrivingcar__speed.last ([mlw:proxy_symbol]
          [introduced] temp___expr_203))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_204) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_205) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining a value for string literal  defined at selfdrivingcar.adb:22, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_242
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_242 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_242__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Standard__string
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_103) : Standard__string.string__
    ([mlw:proxy_symbol] [introduced] temp___is_init_99) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_101) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_102) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) then
       True  else
       (Standard__string.dynamic_property Standard__positive.first
          Standard__positive.last
          (Standard__string.first ([mlw:proxy_symbol]
             [introduced] temp___expr_103))
          (Standard__string.last ([mlw:proxy_symbol]
             [introduced] temp___expr_103))))

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "gearbox" defined at selfdrivingcar.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__gearbox___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__gearbox
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_175) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_171) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_172) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_173) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_174) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_171) = True) \/
          (Selfdrivingcar__gearbox.first <= Selfdrivingcar__gearbox.last))
       then
       (Selfdrivingcar__gearbox.dynamic_property
          Selfdrivingcar__gearbox.first Selfdrivingcar__gearbox.last
          ([mlw:proxy_symbol] [introduced] temp___expr_175))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_176) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_177) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "sensor" defined at selfdrivingcar.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__sensor___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__sensor
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_182) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_178) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_179) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_180) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_181) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_178) = True) \/
          (Selfdrivingcar__sensor.first <= Selfdrivingcar__sensor.last))
       then
       (Selfdrivingcar__sensor.dynamic_property Selfdrivingcar__sensor.first
          Selfdrivingcar__sensor.last ([mlw:proxy_symbol]
          [introduced] temp___expr_182))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_183) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_184) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "ignition" defined at selfdrivingcar.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__ignition___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__ignition
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_189) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_185) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_186) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_187) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_188) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_185) = True) \/
          (Selfdrivingcar__ignition.first <= Selfdrivingcar__ignition.last))
       then
       (Selfdrivingcar__ignition.dynamic_property
          Selfdrivingcar__ignition.first Selfdrivingcar__ignition.last
          ([mlw:proxy_symbol] [introduced] temp___expr_189))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_190) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_191) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "diagnostics" defined at selfdrivingcar.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__diagnostics___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__diagnostics
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_196) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_192) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_193) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_194) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_195) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_192) = True) \/
          (Selfdrivingcar__diagnostics.first
             <= Selfdrivingcar__diagnostics.last))
       then
       (Selfdrivingcar__diagnostics.dynamic_property
          Selfdrivingcar__diagnostics.first Selfdrivingcar__diagnostics.last
          ([mlw:proxy_symbol] [introduced] temp___expr_196))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_197) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_198) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "batterypercentage" defined at selfdrivingcar.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__batterypercentage___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__batterypercentage
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_210) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_206) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_207) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_208) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_209) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_206) = True) \/
          (Selfdrivingcar__batterypercentage.first
             <= Selfdrivingcar__batterypercentage.last))
       then
       (Selfdrivingcar__batterypercentage.dynamic_property
          Selfdrivingcar__batterypercentage.first
          Selfdrivingcar__batterypercentage.last ([mlw:proxy_symbol]
          [introduced] temp___expr_210))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_211) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_212) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "mycar" defined at selfdrivingcar.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selfdrivingcar__mycar___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "speedlimit" defined at selfdrivingcar.ads:55, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selfdrivingcar__applyacceleratorpedal__speedlimit___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for axiomatizing type "count" defined at a-textio.ads:78, created in Gnat2Why.Types.Translate_Type *)
module Ada___ada__text_io__count
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type count  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = count,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type count__ref  = { mutable count__content : count }
  
  function   count__ref_count__content__projection (a : count__ref) requires
    {  } ensures  {  } returns count = a.count__content
  
  meta model_projection function count__ref_count__content__projection
  
  meta inline:no function count__ref_count__content__projection
  
  function   count__havoc (x : count__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "count" defined at a-textio.ads:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada___ada__text_io__count___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Ada___ada__text_io__count
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_168) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_165) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_166) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_167) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_164) = True) \/
          (Ada___ada__text_io__count.first <= Ada___ada__text_io__count.last))
       then
       (Ada___ada__text_io__count.dynamic_property
          Ada___ada__text_io__count.first Ada___ada__text_io__count.last
          ([mlw:proxy_symbol] [introduced] temp___expr_168))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_169) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_170) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "line_length" defined at a-textio.ads:243, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__line_length__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   line_length (__void_param : unit) requires { True } ensures 
    { ((result
          = (Ada___ada__text_io__line_length__2.line_length
               !Ada___ada__text_io__file_system.file_system
               !Ada___ada__text_io__standard_in.standard_in
               !Ada___ada__text_io__standard_out.standard_out
               !Ada___ada__text_io__standard_err.standard_err
               !Ada___ada__text_io__current_in.current_in
               !Ada___ada__text_io__current_out.current_out
               !Ada___ada__text_io__current_err.current_err)) /\ True /\
         (Ada___ada__text_io__count___axiom.dynamic_invariant result True
            False True True)) } returns int
  
  axiom line_length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for declaring a program function (and possibly an axiom) for "page_length" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__page_length__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   page_length (__void_param : unit) requires { True } ensures 
    { ((result
          = (Ada___ada__text_io__page_length__2.page_length
               !Ada___ada__text_io__file_system.file_system
               !Ada___ada__text_io__standard_in.standard_in
               !Ada___ada__text_io__standard_out.standard_out
               !Ada___ada__text_io__standard_err.standard_err
               !Ada___ada__text_io__current_in.current_in
               !Ada___ada__text_io__current_out.current_out
               !Ada___ada__text_io__current_err.current_err)) /\ True /\
         (Ada___ada__text_io__count___axiom.dynamic_invariant result True
            False True True)) } returns int
  
  axiom page_length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for checking contracts and absence of run-time errors in subprogram "applyacceleratorpedal" defined at selfdrivingcar.ads:55, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Selfdrivingcar__applyacceleratorpedal__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Boolean
  use        Standard__string
  use        Selfdrivingcar__mycar
  use        Selfdrivingcar__car
  use        Selfdrivingcar__car___axiom
  use        Selfdrivingcar__invariant
  use        Selfdrivingcar__invariant___axiom
  use        Selfdrivingcar__applyacceleratorpedal__speedlimit
  use        Ada___ada__text_io__put_line__2___axiom
  use        Selfdrivingcar__sensor
  use        Selfdrivingcar__sensor__rep
  use        Selfdrivingcar__speed
  use        Selfdrivingcar__speed___axiom
  use        Selfdrivingcar__speed__rep
  use        Selfdrivingcar__batterypercentage
  use        Selfdrivingcar__batterypercentage__rep
  use        Temp___String_Literal_242
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Standard__positive___axiom
  use        Standard__character___axiom
  use        Standard__string___axiom
  use        Standard__integer___axiom
  use        Selfdrivingcar__gearbox___axiom
  use        Selfdrivingcar__sensor___axiom
  use        Selfdrivingcar__ignition___axiom
  use        Selfdrivingcar__diagnostics___axiom
  use        Selfdrivingcar__speed___axiom
  use        Selfdrivingcar__batterypercentage___axiom
  use        Selfdrivingcar__car___axiom
  use        Selfdrivingcar__mycar___axiom
  use        Selfdrivingcar__invariant___axiom
  use        Selfdrivingcar__applyacceleratorpedal__speedlimit___axiom
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__line_length__2___axiom
  use        Ada___ada__text_io__page_length__2___axiom
  use        Ada___ada__text_io__put_line__2___axiom
  
  function [GP_Subp:selfdrivingcar.ads:55] [sloc:selfdrivingcar.ads:55] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:selfdrivingcar.ads:59] ([GP_Reason:VC_POSTCONDITION]
                                    [GP_Sloc:selfdrivingcar.ads:59:16]
                                    [model_vc_post] [GP_Id:2]
                                    [GP_Shape:pragargs__and]
                                    [comment:       Post => Invariant and myCar.currentSpeed < speedLimit;                ^ selfdrivingcar.ads:59:16:VC_POSTCONDITION] (
                                    ([GP_Sloc:selfdrivingcar.ads:59:16]
                                    [GP_Pretty_Ada:1063] ((epsilon ([mlw:proxy_symbol]
                                                          [introduced] temp___result_245) : bool {
                                                          ((([mlw:proxy_symbol]
                                                              [introduced] temp___result_245)
                                                              = (Selfdrivingcar__invariant.invariant__
                                                                   !Selfdrivingcar__mycar.mycar__split_fields))
                                                             /\
                                                             (Selfdrivingcar__invariant.invariant____function_guard
                                                                ([mlw:proxy_symbol]
                                                                [introduced] temp___result_245)
                                                                !Selfdrivingcar__mycar.mycar__split_fields))})
                                                            = True)) /\
                                      ([GP_Sloc:selfdrivingcar.ads:59:30]
                                      [GP_Pretty_Ada:1069] ((Selfdrivingcar__speed__rep.to_rep
                                                               ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__currentspeed)
                                                              < Selfdrivingcar__applyacceleratorpedal__speedlimit.speedlimit))))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram selfdrivingcar.ads:55 *);
        assume
        { (Selfdrivingcar__car___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        assume
        { (Selfdrivingcar__speed___axiom.dynamic_invariant
             Selfdrivingcar__applyacceleratorpedal__speedlimit.speedlimit
             True False True True) };
        (* Assume moved pointers in outputs of the subprogram selfdrivingcar.ads:55 *);
        (* Check for RTE in the Pre of the subprogram selfdrivingcar.ads:55 *);
        abstract ensures
        { True } begin  (let _ =
                       (_gnatprove_standard.Boolean.andb
                          (_gnatprove_standard.Boolean.andb
                             (Selfdrivingcar__invariant___axiom.invariant__
                                ())
                             (((Selfdrivingcar__speed__rep.to_rep
                                  ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__currentspeed)
                                 + 1)
                                < Selfdrivingcar__applyacceleratorpedal__speedlimit.speedlimit))
                          ((Selfdrivingcar__sensor__rep.to_rep
                              ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__objectscanner)
                             = 1))
                       in ())  end;
        (* Assume Pre of the subprogram selfdrivingcar.ads:55 *);
        assume
        { ((([GP_Pretty_Ada:1045] ((epsilon ([mlw:proxy_symbol]
                                   [introduced] temp___result_244) : bool {
                                   ((([mlw:proxy_symbol]
                                       [introduced] temp___result_244)
                                       = (Selfdrivingcar__invariant.invariant__
                                            !Selfdrivingcar__mycar.mycar__split_fields))
                                      /\
                                      (Selfdrivingcar__invariant.invariant____function_guard
                                         ([mlw:proxy_symbol]
                                         [introduced] temp___result_244)
                                         !Selfdrivingcar__mycar.mycar__split_fields))})
                                     = True)) /\
              ([GP_Pretty_Ada:1053] (((Selfdrivingcar__speed__rep.to_rep
                                         ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__currentspeed)
                                        + 1)
                                       < Selfdrivingcar__applyacceleratorpedal__speedlimit.speedlimit)))
             /\
             ([GP_Pretty_Ada:1059] ((Selfdrivingcar__sensor__rep.to_rep
                                       ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__objectscanner)
                                      = 1))) };
        (try
        ();
          ([GP_Sloc:selfdrivingcar.adb:20:7] ([sloc:selfdrivingcar.adb:20] ()));
          ([GP_Sloc:selfdrivingcar.adb:20:29] ([sloc:selfdrivingcar.adb:20] ()));
          ([GP_Sloc:selfdrivingcar.adb:20:26] ([sloc:selfdrivingcar.adb:20] (let ([mlw:proxy_symbol]
                                              [introduced] temp___241) =
                                              (let ([mlw:proxy_symbol]
                                                [introduced] temp___240) =
                                                ( --pp_record_aggregate NOT IMPLEMENTED)
                                                in abstract ensures
                                                { True } begin  (let _ =
                                                               ([mlw:proxy_symbol]
                                                                 [introduced] temp___240).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__currentspeed
                                                               in ())  end;
                                                --pp_record_update NOT IMPLEMENTED)
                                              in (
                                              Selfdrivingcar__mycar.mycar__split_fields
                                              :=
                                              ([mlw:proxy_symbol]
                                                [introduced] temp___241).Selfdrivingcar__car.__split_fields))));
          ([GP_Sloc:selfdrivingcar.adb:21:11] ([sloc:selfdrivingcar.adb:21] ()));
          ([GP_Sloc:selfdrivingcar.adb:21:7] ([sloc:selfdrivingcar.adb:21] 
                                             (if
                                             ([sloc:selfdrivingcar.adb:21] ([branch_id=870]
                                             _gnatprove_standard.Main.spark__branch
                                             :=
                                             ((Selfdrivingcar__batterypercentage__rep.to_rep
                                                 ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__batterycharge)
                                                < 15)));
                                             ([branch_id=870] _gnatprove_standard.Main.spark__branch).bool__content
                                             then
                                             ();
                                             ([GP_Sloc:selfdrivingcar.adb:22:10] 
                                             ([sloc:selfdrivingcar.adb:22] ()));
                                             ([GP_Sloc:selfdrivingcar.adb:22:10] 
                                             ([sloc:selfdrivingcar.adb:22] (
                                              any
                                               --pp_effects NOT IMPLEMENTED
                                               pre {}
                                             post {} return unit);
                                             (Ada___ada__text_io__put_line__2___axiom.put_line
                                                (let ([mlw:proxy_symbol]
                                                [introduced] temp___243) =
                                                ( (Temp___String_Literal_242.temp___String_Literal_242
                                                     ())) in
                                                (Standard__string.of_array
                                                   ([mlw:proxy_symbol]
                                                   [introduced] temp___243) 1
                                                   20)));
                                             ()))  else ())));
        raise Return__exc with | Return__exc  -> ());
    abstract ensures
    { True } begin  (let _ =
                   (_gnatprove_standard.Boolean.andb
                      (Selfdrivingcar__invariant___axiom.invariant__ ())
                      ((Selfdrivingcar__speed__rep.to_rep
                          ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__currentspeed)
                         < Selfdrivingcar__applyacceleratorpedal__speedlimit.speedlimit))
                   in ())  end

end
