(* Module for axiomatizing type "gearbox" defined at selfdrivingcar.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__gearbox
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type gearbox  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 2
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = gearbox,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type gearbox__ref  = { mutable gearbox__content : gearbox }
  
  function   gearbox__ref_gearbox__content__projection (a : gearbox__ref)
    requires {  } ensures  {  } returns gearbox = a.gearbox__content
  
  meta model_projection function gearbox__ref_gearbox__content__projection
  
  meta inline:no function gearbox__ref_gearbox__content__projection
  
  function   gearbox__havoc (x : gearbox__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "gearbox" defined at selfdrivingcar.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__gearbox__rep
  
  use        Selfdrivingcar__gearbox
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__gearbox.gearbox,
    predicate in_range = Selfdrivingcar__gearbox.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "sensor" defined at selfdrivingcar.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__sensor
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type sensor  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = sensor,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type sensor__ref  = { mutable sensor__content : sensor }
  
  function   sensor__ref_sensor__content__projection (a : sensor__ref)
    requires {  } ensures  {  } returns sensor = a.sensor__content
  
  meta model_projection function sensor__ref_sensor__content__projection
  
  meta inline:no function sensor__ref_sensor__content__projection
  
  function   sensor__havoc (x : sensor__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "sensor" defined at selfdrivingcar.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__sensor__rep
  
  use        Selfdrivingcar__sensor
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__sensor.sensor,
    predicate in_range = Selfdrivingcar__sensor.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "ignition" defined at selfdrivingcar.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__ignition
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type ignition  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = ignition,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type ignition__ref  = { mutable ignition__content : ignition }
  
  function   ignition__ref_ignition__content__projection (a : ignition__ref)
    requires {  } ensures  {  } returns ignition = a.ignition__content
  
  meta model_projection function ignition__ref_ignition__content__projection
  
  meta inline:no function ignition__ref_ignition__content__projection
  
  function   ignition__havoc (x : ignition__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "ignition" defined at selfdrivingcar.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__ignition__rep
  
  use        Selfdrivingcar__ignition
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__ignition.ignition,
    predicate in_range = Selfdrivingcar__ignition.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "diagnostics" defined at selfdrivingcar.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__diagnostics
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type diagnostics  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = diagnostics,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type diagnostics__ref  = { mutable diagnostics__content : diagnostics }
  
  function   diagnostics__ref_diagnostics__content__projection
    (a : diagnostics__ref) requires {  } ensures  {  } returns
    diagnostics = a.diagnostics__content
  
  meta model_projection function diagnostics__ref_diagnostics__content__projection
  
  meta inline:no function diagnostics__ref_diagnostics__content__projection
  
  function   diagnostics__havoc (x : diagnostics__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "diagnostics" defined at selfdrivingcar.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__diagnostics__rep
  
  use        Selfdrivingcar__diagnostics
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__diagnostics.diagnostics,
    predicate in_range = Selfdrivingcar__diagnostics.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "speed" defined at selfdrivingcar.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__speed
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type speed  = <range 0 70>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 70
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = speed,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type speed__ref  = { mutable speed__content : speed }
  
  function   speed__ref_speed__content__projection (a : speed__ref) requires
    {  } ensures  {  } returns speed = a.speed__content
  
  meta model_projection function speed__ref_speed__content__projection
  
  meta inline:no function speed__ref_speed__content__projection
  
  function   speed__havoc (x : speed__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "speed" defined at selfdrivingcar.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__speed__rep
  
  use        Selfdrivingcar__speed
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Selfdrivingcar__speed.speed) requires { True }
    ensures  { True } returns int = (Selfdrivingcar__speed.speed'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__speed.speed,
    predicate in_range = Selfdrivingcar__speed.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "batterypercentage" defined at selfdrivingcar.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__batterypercentage
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type batterypercentage  = <range 0 100>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 100
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = batterypercentage,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type batterypercentage__ref  = { mutable batterypercentage__content : batterypercentage }
  
  function   batterypercentage__ref_batterypercentage__content__projection
    (a : batterypercentage__ref) requires {  } ensures  {  } returns
    batterypercentage = a.batterypercentage__content
  
  meta model_projection function batterypercentage__ref_batterypercentage__content__projection
  
  meta inline:no function batterypercentage__ref_batterypercentage__content__projection
  
  function   batterypercentage__havoc (x : batterypercentage__ref) requires
    {  } ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "batterypercentage" defined at selfdrivingcar.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__batterypercentage__rep
  
  use        Selfdrivingcar__batterypercentage
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Selfdrivingcar__batterypercentage.batterypercentage)
    requires { True } ensures  { True } returns
    int = (Selfdrivingcar__batterypercentage.batterypercentage'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__batterypercentage.batterypercentage,
    predicate in_range = Selfdrivingcar__batterypercentage.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "car" defined at selfdrivingcar.ads:13, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Selfdrivingcar__car__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Selfdrivingcar__gearbox
  use        Selfdrivingcar__gearbox__rep
  use        Selfdrivingcar__sensor
  use        Selfdrivingcar__sensor__rep
  use        Selfdrivingcar__ignition
  use        Selfdrivingcar__ignition__rep
  use        Selfdrivingcar__diagnostics
  use        Selfdrivingcar__diagnostics__rep
  use        Selfdrivingcar__speed
  use        Selfdrivingcar__speed__rep
  use        Selfdrivingcar__batterypercentage
  use        Selfdrivingcar__batterypercentage__rep
  
  type __split_fields  = { [model_trace:.929]
                           [name:gearEngaged]rec__selfdrivingcar__car__gearengaged : Selfdrivingcar__gearbox.gearbox;
                           [name:objectScanner]
                           [model_trace:.934]rec__selfdrivingcar__car__objectscanner : Selfdrivingcar__sensor.sensor;
                           [model_trace:.938]
                           [name:status]rec__selfdrivingcar__car__status : Selfdrivingcar__ignition.ignition;
                           [model_trace:.942]
                           [name:diagnosticMode]rec__selfdrivingcar__car__diagnosticmode : Selfdrivingcar__diagnostics.diagnostics;
                           [model_trace:.946]
                           [name:currentSpeed]rec__selfdrivingcar__car__currentspeed : Selfdrivingcar__speed.speed;
                           [model_trace:.950]
                           [name:batteryCharge]rec__selfdrivingcar__car__batterycharge : Selfdrivingcar__batterypercentage.batterypercentage }
  
  function [model_trace:.929] [name:gearEngaged] 
    __split_fields_rec__selfdrivingcar__car__gearengaged__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__gearbox.gearbox = a.rec__selfdrivingcar__car__gearengaged
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__gearengaged__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__gearengaged__projection
  
  function [name:objectScanner] [model_trace:.934] 
    __split_fields_rec__selfdrivingcar__car__objectscanner__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__sensor.sensor = a.rec__selfdrivingcar__car__objectscanner
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__objectscanner__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__objectscanner__projection
  
  function [model_trace:.938] [name:status] 
    __split_fields_rec__selfdrivingcar__car__status__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__ignition.ignition = a.rec__selfdrivingcar__car__status
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__status__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__status__projection
  
  function [model_trace:.942] [name:diagnosticMode] 
    __split_fields_rec__selfdrivingcar__car__diagnosticmode__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__diagnostics.diagnostics = a.rec__selfdrivingcar__car__diagnosticmode
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__diagnosticmode__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__diagnosticmode__projection
  
  function [model_trace:.946] [name:currentSpeed] 
    __split_fields_rec__selfdrivingcar__car__currentspeed__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__speed.speed = a.rec__selfdrivingcar__car__currentspeed
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__currentspeed__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__currentspeed__projection
  
  function [model_trace:.950] [name:batteryCharge] 
    __split_fields_rec__selfdrivingcar__car__batterycharge__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__batterypercentage.batterypercentage = a.rec__selfdrivingcar__car__batterycharge
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__batterycharge__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__batterycharge__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   selfdrivingcar__car__gearengaged__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__gearengaged_ (a : __rep) requires
    { (selfdrivingcar__car__gearengaged__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__gearengaged) }
    returns Selfdrivingcar__gearbox.gearbox
  
  function   selfdrivingcar__car__objectscanner__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__objectscanner_ (a : __rep) requires
    { (selfdrivingcar__car__objectscanner__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__objectscanner) }
    returns Selfdrivingcar__sensor.sensor
  
  function   selfdrivingcar__car__status__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__status_ (a : __rep) requires
    { (selfdrivingcar__car__status__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__status) } returns
    Selfdrivingcar__ignition.ignition
  
  function   selfdrivingcar__car__diagnosticmode__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__diagnosticmode_ (a : __rep) requires
    { (selfdrivingcar__car__diagnosticmode__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__diagnosticmode) }
    returns Selfdrivingcar__diagnostics.diagnostics
  
  function   selfdrivingcar__car__currentspeed__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__currentspeed_ (a : __rep) requires
    { (selfdrivingcar__car__currentspeed__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__currentspeed) }
    returns Selfdrivingcar__speed.speed
  
  function   selfdrivingcar__car__batterycharge__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__batterycharge_ (a : __rep) requires
    { (selfdrivingcar__car__batterycharge__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__batterycharge) }
    returns Selfdrivingcar__batterypercentage.batterypercentage
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Selfdrivingcar__gearbox__rep.to_rep
                a.__split_fields.rec__selfdrivingcar__car__gearengaged)
               = (Selfdrivingcar__gearbox__rep.to_rep
                    b.__split_fields.rec__selfdrivingcar__car__gearengaged))
              /\
              ((Selfdrivingcar__sensor__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__objectscanner)
                 = (Selfdrivingcar__sensor__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__objectscanner))
              /\
              ((Selfdrivingcar__ignition__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__status)
                 = (Selfdrivingcar__ignition__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__status)) /\
              ((Selfdrivingcar__diagnostics__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__diagnosticmode)
                 = (Selfdrivingcar__diagnostics__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__diagnosticmode))
              /\
              ((Selfdrivingcar__speed__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__currentspeed)
                 = (Selfdrivingcar__speed__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__currentspeed))
              /\
              ((Selfdrivingcar__batterypercentage__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__batterycharge)
                 = (Selfdrivingcar__batterypercentage__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__batterycharge)))
           then True  else False)

end

(* Module for axiomatizing type "car" defined at selfdrivingcar.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__car
  
  use export Selfdrivingcar__car__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type car  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   selfdrivingcar__car__gearengaged__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__gearengaged__last__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__gearengaged__position () requires {  }
    ensures  {  } returns int
  
  axiom selfdrivingcar__car__gearengaged__first__bit_axiom : ((selfdrivingcar__car__gearengaged__first__bit
                                                                 ) >= 0)
  
  axiom selfdrivingcar__car__gearengaged__last__bit_axiom : ((selfdrivingcar__car__gearengaged__last__bit
                                                                )
                                                               > (selfdrivingcar__car__gearengaged__first__bit
                                                                    ))
  
  axiom selfdrivingcar__car__gearengaged__position_axiom : ((selfdrivingcar__car__gearengaged__position
                                                               ) >= 0)
  
  function   selfdrivingcar__car__objectscanner__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__objectscanner__last__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__objectscanner__position () requires {  }
    ensures  {  } returns int
  
  axiom selfdrivingcar__car__objectscanner__first__bit_axiom : ((selfdrivingcar__car__objectscanner__first__bit
                                                                   ) >= 0)
  
  axiom selfdrivingcar__car__objectscanner__last__bit_axiom : ((selfdrivingcar__car__objectscanner__last__bit
                                                                  )
                                                                 > (selfdrivingcar__car__objectscanner__first__bit
                                                                    ))
  
  axiom selfdrivingcar__car__objectscanner__position_axiom : ((selfdrivingcar__car__objectscanner__position
                                                                 ) >= 0)
  
  function   selfdrivingcar__car__status__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__status__last__bit () requires {  } ensures 
    {  } returns int
  
  function   selfdrivingcar__car__status__position () requires {  } ensures 
    {  } returns int
  
  axiom selfdrivingcar__car__status__first__bit_axiom : ((selfdrivingcar__car__status__first__bit
                                                            ) >= 0)
  
  axiom selfdrivingcar__car__status__last__bit_axiom : ((selfdrivingcar__car__status__last__bit
                                                           )
                                                          > (selfdrivingcar__car__status__first__bit
                                                               ))
  
  axiom selfdrivingcar__car__status__position_axiom : ((selfdrivingcar__car__status__position
                                                          ) >= 0)
  
  function   selfdrivingcar__car__diagnosticmode__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__diagnosticmode__last__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__diagnosticmode__position () requires {  }
    ensures  {  } returns int
  
  axiom selfdrivingcar__car__diagnosticmode__first__bit_axiom : ((selfdrivingcar__car__diagnosticmode__first__bit
                                                                    ) >= 0)
  
  axiom selfdrivingcar__car__diagnosticmode__last__bit_axiom : ((selfdrivingcar__car__diagnosticmode__last__bit
                                                                   )
                                                                  > (
                                                                  selfdrivingcar__car__diagnosticmode__first__bit
                                                                    ))
  
  axiom selfdrivingcar__car__diagnosticmode__position_axiom : ((selfdrivingcar__car__diagnosticmode__position
                                                                  ) >= 0)
  
  function   selfdrivingcar__car__currentspeed__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__currentspeed__last__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__currentspeed__position () requires {  }
    ensures  {  } returns int
  
  axiom selfdrivingcar__car__currentspeed__first__bit_axiom : ((selfdrivingcar__car__currentspeed__first__bit
                                                                  ) >= 0)
  
  axiom selfdrivingcar__car__currentspeed__last__bit_axiom : ((selfdrivingcar__car__currentspeed__last__bit
                                                                 )
                                                                > (selfdrivingcar__car__currentspeed__first__bit
                                                                    ))
  
  axiom selfdrivingcar__car__currentspeed__position_axiom : ((selfdrivingcar__car__currentspeed__position
                                                                ) >= 0)
  
  function   selfdrivingcar__car__batterycharge__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__batterycharge__last__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__batterycharge__position () requires {  }
    ensures  {  } returns int
  
  axiom selfdrivingcar__car__batterycharge__first__bit_axiom : ((selfdrivingcar__car__batterycharge__first__bit
                                                                   ) >= 0)
  
  axiom selfdrivingcar__car__batterycharge__last__bit_axiom : ((selfdrivingcar__car__batterycharge__last__bit
                                                                  )
                                                                 > (selfdrivingcar__car__batterycharge__first__bit
                                                                    ))
  
  axiom selfdrivingcar__car__batterycharge__position_axiom : ((selfdrivingcar__car__batterycharge__position
                                                                 ) >= 0)
  
  function   user_eq (a : car b : car) requires { True } ensures  { True }
    returns bool
  
  function   dummy () requires {  } ensures  {  } returns car
  
  type car__ref  = { mutable car__content : car }
  
  function   car__ref_car__content__projection (a : car__ref) requires {  }
    ensures  {  } returns car = a.car__content
  
  meta model_projection function car__ref_car__content__projection
  
  meta inline:no function car__ref_car__content__projection
  
  function   car__havoc (x : car__ref) requires {  } ensures  {  } returns
    unit

end

(* Module for defining a ref holding the value of variable "mycar" defined at selfdrivingcar.ads:25, created in Gnat2Why.Decls.Translate_Variable *)
module Selfdrivingcar__mycar
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Selfdrivingcar__car
  
  val mycar__split_fields [name:myCar] [model_projected]
  [model_trace:956] [sloc:selfdrivingcar.ads:25]: Selfdrivingcar__car.__split_fields

end

(* Module giving axioms for type "car" defined at selfdrivingcar.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__car___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Selfdrivingcar__car
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_208) : Selfdrivingcar__car.car
    ([mlw:proxy_symbol] [introduced] temp___is_init_204) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_205) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_206) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_207) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_209) : Selfdrivingcar__car.car
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_210) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for possibly declaring a logic function for "invariant" defined at selfdrivingcar.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Selfdrivingcar__invariant
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Selfdrivingcar__car
  
  function   invariant__
    (Selfdrivingcar__mycar___mycar__split_fields___ : Selfdrivingcar__car.__split_fields)
    requires { True } ensures  { True } returns bool
  
  function   invariant____function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_161) : bool
    Selfdrivingcar__mycar___mycar__split_fields___ : Selfdrivingcar__car.__split_fields)
    requires { True } ensures  { True } returns bool

end

(* Module giving a program function and a defining axiom for the expression function "invariant" defined at selfdrivingcar.ads:32, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Selfdrivingcar__invariant___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__mycar
  use        Selfdrivingcar__car
  use        Selfdrivingcar__car___axiom
  use        Selfdrivingcar__invariant
  use        Selfdrivingcar__diagnostics
  use        Selfdrivingcar__diagnostics__rep
  
  function   invariant__ (__void_param : unit) requires { True } ensures 
    { ((result
          = (Selfdrivingcar__invariant.invariant__
               !Selfdrivingcar__mycar.mycar__split_fields)) /\
         (Selfdrivingcar__invariant.invariant____function_guard result
            !Selfdrivingcar__mycar.mycar__split_fields) /\
         (result
            = ((Selfdrivingcar__diagnostics__rep.to_rep
                  ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__diagnosticmode)
                 <> 0))) } returns bool
  
  axiom invariant____post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom invariant____def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining the constant "speedlimit" defined at selfdrivingcar.ads:53, created in Gnat2Why.Decls.Translate_Constant *)
module Selfdrivingcar__applyacceleratorpedal__speedlimit
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:1024] [name:speedLimit] [sloc:selfdrivingcar.ads:53]
    speedlimit () requires {  } ensures  {  } returns int

end

(* Module giving axioms for type "speed" defined at selfdrivingcar.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__speed___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__speed
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_194) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_190) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_191) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_192) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_193) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_190) = True) \/
          (Selfdrivingcar__speed.first <= Selfdrivingcar__speed.last))
       then
       (Selfdrivingcar__speed.dynamic_property Selfdrivingcar__speed.first
          Selfdrivingcar__speed.last ([mlw:proxy_symbol]
          [introduced] temp___expr_194))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_195) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_196) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "gearbox" defined at selfdrivingcar.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__gearbox___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__gearbox
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_166) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_162) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_165) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_162) = True) \/
          (Selfdrivingcar__gearbox.first <= Selfdrivingcar__gearbox.last))
       then
       (Selfdrivingcar__gearbox.dynamic_property
          Selfdrivingcar__gearbox.first Selfdrivingcar__gearbox.last
          ([mlw:proxy_symbol] [introduced] temp___expr_166))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_167) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_168) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "sensor" defined at selfdrivingcar.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__sensor___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__sensor
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_173) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_169) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_171) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_172) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_169) = True) \/
          (Selfdrivingcar__sensor.first <= Selfdrivingcar__sensor.last))
       then
       (Selfdrivingcar__sensor.dynamic_property Selfdrivingcar__sensor.first
          Selfdrivingcar__sensor.last ([mlw:proxy_symbol]
          [introduced] temp___expr_173))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_174) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_175) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "ignition" defined at selfdrivingcar.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__ignition___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__ignition
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_180) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_176) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_177) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_178) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_179) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_176) = True) \/
          (Selfdrivingcar__ignition.first <= Selfdrivingcar__ignition.last))
       then
       (Selfdrivingcar__ignition.dynamic_property
          Selfdrivingcar__ignition.first Selfdrivingcar__ignition.last
          ([mlw:proxy_symbol] [introduced] temp___expr_180))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_181) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_182) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "diagnostics" defined at selfdrivingcar.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__diagnostics___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__diagnostics
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_187) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_183) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_184) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_185) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_186) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_183) = True) \/
          (Selfdrivingcar__diagnostics.first
             <= Selfdrivingcar__diagnostics.last))
       then
       (Selfdrivingcar__diagnostics.dynamic_property
          Selfdrivingcar__diagnostics.first Selfdrivingcar__diagnostics.last
          ([mlw:proxy_symbol] [introduced] temp___expr_187))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_188) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_189) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "batterypercentage" defined at selfdrivingcar.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__batterypercentage___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__batterypercentage
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_201) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_197) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_198) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_199) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_200) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_197) = True) \/
          (Selfdrivingcar__batterypercentage.first
             <= Selfdrivingcar__batterypercentage.last))
       then
       (Selfdrivingcar__batterypercentage.dynamic_property
          Selfdrivingcar__batterypercentage.first
          Selfdrivingcar__batterypercentage.last ([mlw:proxy_symbol]
          [introduced] temp___expr_201))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_202) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_203) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "mycar" defined at selfdrivingcar.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selfdrivingcar__mycar___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "speedlimit" defined at selfdrivingcar.ads:53, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selfdrivingcar__applyacceleratorpedal__speedlimit___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "applyacceleratorpedal" defined at selfdrivingcar.ads:53, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Selfdrivingcar__applyacceleratorpedal__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Boolean
  use        Selfdrivingcar__mycar
  use        Selfdrivingcar__car
  use        Selfdrivingcar__car___axiom
  use        Selfdrivingcar__invariant
  use        Selfdrivingcar__invariant___axiom
  use        Selfdrivingcar__applyacceleratorpedal__speedlimit
  use        Selfdrivingcar__sensor
  use        Selfdrivingcar__sensor__rep
  use        Selfdrivingcar__speed
  use        Selfdrivingcar__speed___axiom
  use        Selfdrivingcar__speed__rep
  use        Selfdrivingcar__batterypercentage
  use        Selfdrivingcar__batterypercentage__rep
  use        Selfdrivingcar__gearbox___axiom
  use        Selfdrivingcar__sensor___axiom
  use        Selfdrivingcar__ignition___axiom
  use        Selfdrivingcar__diagnostics___axiom
  use        Selfdrivingcar__speed___axiom
  use        Selfdrivingcar__batterypercentage___axiom
  use        Selfdrivingcar__car___axiom
  use        Selfdrivingcar__mycar___axiom
  use        Selfdrivingcar__invariant___axiom
  use        Selfdrivingcar__applyacceleratorpedal__speedlimit___axiom
  
  function [GP_Subp:selfdrivingcar.ads:53] [sloc:selfdrivingcar.ads:53] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:selfdrivingcar.ads:57] ([GP_Reason:VC_POSTCONDITION]
                                    [comment:       Post => Invariant and (myCar.currentSpeed <= speedLimit);                ^ selfdrivingcar.ads:57:16:VC_POSTCONDITION]
                                    [GP_Sloc:selfdrivingcar.ads:57:16]
                                    [model_vc_post] [GP_Id:2]
                                    [GP_Shape:pragargs__and] (([GP_Sloc:selfdrivingcar.ads:57:16]
                                                              [GP_Pretty_Ada:1057] (
                                                              (epsilon ([mlw:proxy_symbol]
                                                              [introduced] temp___result_236) : bool {
                                                              ((([mlw:proxy_symbol]
                                                                  [introduced] temp___result_236)
                                                                  = (
                                                                  Selfdrivingcar__invariant.invariant__
                                                                    !Selfdrivingcar__mycar.mycar__split_fields))
                                                                 /\
                                                                 (Selfdrivingcar__invariant.invariant____function_guard
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___result_236)
                                                                    !Selfdrivingcar__mycar.mycar__split_fields))})
                                                                = True)) /\
                                                                ([GP_Pretty_Ada:1063]
                                                                [GP_Sloc:selfdrivingcar.ads:57:30] (
                                                                (Selfdrivingcar__speed__rep.to_rep
                                                                   ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__currentspeed)
                                                                  <= Selfdrivingcar__applyacceleratorpedal__speedlimit.speedlimit))))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram selfdrivingcar.ads:53 *);
        assume
        { (Selfdrivingcar__car___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        assume
        { (Selfdrivingcar__speed___axiom.dynamic_invariant
             Selfdrivingcar__applyacceleratorpedal__speedlimit.speedlimit
             True False True True) };
        (* Assume moved pointers in outputs of the subprogram selfdrivingcar.ads:53 *);
        (* Check for RTE in the Pre of the subprogram selfdrivingcar.ads:53 *);
        abstract ensures
        { True } begin  (let _ =
                       (_gnatprove_standard.Boolean.andb
                          (_gnatprove_standard.Boolean.andb
                             (Selfdrivingcar__invariant___axiom.invariant__
                                ())
                             (((Selfdrivingcar__speed__rep.to_rep
                                  ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__currentspeed)
                                 + 1)
                                <= Selfdrivingcar__applyacceleratorpedal__speedlimit.speedlimit))
                          ((Selfdrivingcar__sensor__rep.to_rep
                              ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__objectscanner)
                             = 1))
                       in ())  end;
        (* Assume Pre of the subprogram selfdrivingcar.ads:53 *);
        assume
        { ((([GP_Pretty_Ada:1039] ((epsilon ([mlw:proxy_symbol]
                                   [introduced] temp___result_235) : bool {
                                   ((([mlw:proxy_symbol]
                                       [introduced] temp___result_235)
                                       = (Selfdrivingcar__invariant.invariant__
                                            !Selfdrivingcar__mycar.mycar__split_fields))
                                      /\
                                      (Selfdrivingcar__invariant.invariant____function_guard
                                         ([mlw:proxy_symbol]
                                         [introduced] temp___result_235)
                                         !Selfdrivingcar__mycar.mycar__split_fields))})
                                     = True)) /\
              ([GP_Pretty_Ada:1047] (((Selfdrivingcar__speed__rep.to_rep
                                         ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__currentspeed)
                                        + 1)
                                       <= Selfdrivingcar__applyacceleratorpedal__speedlimit.speedlimit)))
             /\
             ([GP_Pretty_Ada:1053] ((Selfdrivingcar__sensor__rep.to_rep
                                       ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__objectscanner)
                                      = 1))) };
        (try
        ();
          ([GP_Sloc:selfdrivingcar.adb:18:7] ([sloc:selfdrivingcar.adb:18] ()));
          ([GP_Sloc:selfdrivingcar.adb:18:29] ([sloc:selfdrivingcar.adb:18] ()));
          ([GP_Sloc:selfdrivingcar.adb:18:26] ([sloc:selfdrivingcar.adb:18] (let ([mlw:proxy_symbol]
                                              [introduced] temp___231) =
                                              (let ([mlw:proxy_symbol]
                                                [introduced] temp___230) =
                                                ( --pp_record_aggregate NOT IMPLEMENTED)
                                                in abstract ensures
                                                { True } begin  (let _ =
                                                               ([mlw:proxy_symbol]
                                                                 [introduced] temp___230).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__currentspeed
                                                               in ())  end;
                                                --pp_record_update NOT IMPLEMENTED)
                                              in (
                                              Selfdrivingcar__mycar.mycar__split_fields
                                              :=
                                              ([mlw:proxy_symbol]
                                                [introduced] temp___231).Selfdrivingcar__car.__split_fields))));
          ([GP_Sloc:selfdrivingcar.adb:19:11] ([sloc:selfdrivingcar.adb:19] ()));
          ([GP_Sloc:selfdrivingcar.adb:19:7] ([sloc:selfdrivingcar.adb:19] 
                                             (if
                                             ([sloc:selfdrivingcar.adb:19] ([branch_id=862]
                                             _gnatprove_standard.Main.spark__branch
                                             :=
                                             ((Selfdrivingcar__batterypercentage__rep.to_rep
                                                 ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__batterycharge)
                                                < 15)));
                                             ([branch_id=862] _gnatprove_standard.Main.spark__branch).bool__content
                                             then
                                             ();
                                             ([GP_Sloc:selfdrivingcar.adb:22:10] 
                                             ([sloc:selfdrivingcar.adb:22] ()));
                                             ([GP_Sloc:selfdrivingcar.adb:22:32] 
                                             ([sloc:selfdrivingcar.adb:22] ()));
                                             ([GP_Sloc:selfdrivingcar.adb:22:29] 
                                             ([sloc:selfdrivingcar.adb:22] (let ([mlw:proxy_symbol]
                                             [introduced] temp___234) =
                                             (let ([mlw:proxy_symbol]
                                               [introduced] temp___233) =
                                               ( --pp_record_aggregate NOT IMPLEMENTED)
                                               in abstract ensures
                                               { True } begin  (let _ =
                                                              ([mlw:proxy_symbol]
                                                                [introduced] temp___233).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__currentspeed
                                                              in ())  end;
                                               --pp_record_update NOT IMPLEMENTED)
                                             in (
                                             Selfdrivingcar__mycar.mycar__split_fields
                                             :=
                                             ([mlw:proxy_symbol]
                                               [introduced] temp___234).Selfdrivingcar__car.__split_fields))))
                                              else ())));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       (_gnatprove_standard.Boolean.andb
                          (Selfdrivingcar__invariant___axiom.invariant__ ())
                          ((Selfdrivingcar__speed__rep.to_rep
                              ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__currentspeed)
                             <= Selfdrivingcar__applyacceleratorpedal__speedlimit.speedlimit))
                       in ())  end

end
